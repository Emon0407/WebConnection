//------------------------------------------------------------------------------
// <auto-generated>This code was generated by LLBLGen Pro v3.1.</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Data.Common;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Configuration;
using System.Data.SqlClient;
using System.Linq;
using System.Reflection;
using CCE.WebConnection.DataAccess.EntityClasses;

namespace CCE.WebConnection.DataAccess
{
	/// <summary>Class which represents the DataContext for the project / group 'WebConnection'</summary>
	/// <remarks>Targets the catalog(s): 'WebConnection'</remarks>
	public partial class WebConnectionDataContext : System.Data.Linq.DataContext
	{
		private static readonly System.Data.Linq.Mapping.MappingSource _mappingSource = new AttributeMappingSource();
		
		#region Extensibility Method Definitions
		partial void OnCreated();
		#endregion
		
		/// <summary>Initializes a new instance of the <see cref="WebConnectionDataContext"/> class.</summary>
		public WebConnectionDataContext() : 
				base(ConfigurationManager.ConnectionStrings["ConnectionString.SQL Server (SqlClient)"].ConnectionString, _mappingSource)
		{
			OnCreated();
		}

		/// <summary>Initializes a new instance of the <see cref="WebConnectionDataContext"/> class.</summary>
		/// <param name="mappingSource">The mapping source.</param>
		public WebConnectionDataContext(System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(ConfigurationManager.ConnectionStrings["ConnectionString.SQL Server (SqlClient)"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="WebConnectionDataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		public WebConnectionDataContext(string connection) : 
				base(connection, _mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="WebConnectionDataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		public WebConnectionDataContext(System.Data.IDbConnection connection) : 
				base(connection, _mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="WebConnectionDataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		/// <param name="mappingSource">The mapping source.</param>
		public WebConnectionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Initializes a new instance of the <see cref="WebConnectionDataContext"/> class.</summary>
		/// <param name="connection">The connection.</param>
		/// <param name="mappingSource">The mapping source.</param>
		public WebConnectionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		/// <summary>Gets an open DbDataReader instance with the results of the query specified</summary>
		/// <param name="query">The query to execute</param>
		/// <returns>An open DbDataReader instance with the results of the query specified</returns>
		/// <remarks>The command behavior is set to CloseConnection.</remarks>
		public DbDataReader GetQueryAsDataReader(IQueryable query)
		{
			return SetupCommand(GetCommand(query), true).ExecuteReader(CommandBehavior.CloseConnection);
		}
		
		/// <summary>Gets the Customer Table definition. Mapped on table 'WebConnection.dbo.Customer'.</summary>
		public System.Data.Linq.Table<Customer> Customers
		{
			get { return this.GetTable<Customer>(); }
		}
		
		/// <summary>Sets up the command specified. It wires it to the current connection and transaction, sets command timeout and if requested, it also opens the command</summary>
		/// <param name="toSetup">The command to setup</param>
		/// <param name="openConnection">If set to true, the connection is also opened if it's not already open, otherwise it's left as-is</param>
		/// <returns>The passed in DbCommand</returns>
		private DbCommand SetupCommand(DbCommand toSetup, bool openConnection)
		{
			if(toSetup==null)
			{
				return toSetup;
			}
			toSetup.Connection = this.Connection;
			toSetup.Transaction = this.Transaction;
			toSetup.CommandTimeout = this.CommandTimeout;
			if((toSetup.Connection!=null) && openConnection && (toSetup.Connection.State!=ConnectionState.Open))
			{
				toSetup.Connection.Open();
			}
			return toSetup;
		}
				        
		/// <summary>Creates a new stored procedure call command and sets it up to make it ready to use.</summary>
		/// <param name="storedProcedureToCall">The stored procedure to call.</param>
		/// <returns>ready to use command</returns>
		private DbCommand CreateStoredProcCallCommand(string storedProcedureToCall)
		{
			var cmd = this.Connection.CreateCommand();
			cmd.CommandType = CommandType.StoredProcedure;
			cmd.CommandText = storedProcedureToCall;
			return SetupCommand(cmd, false);
		}
        
		/// <summary>Adds a new parameter created from the input specified to the command specified</summary>
		/// <param name="cmd">The command to add the new parameter to</param>
		/// <param name="parameterName">Name of the parameter.</param>
		/// <param name="type">The type.</param>
		/// <param name="length">The length.</param>
		/// <param name="direction">The direction.</param>
		/// <param name="value">The value for the parameter</param>
		private static void AddParameter(DbCommand cmd, string parameterName, SqlDbType type, int length, ParameterDirection direction, object value)
		{
			cmd.Parameters.Add(new SqlParameter(parameterName, type, length) { Direction = direction, Value = value });
		}

	}
}
